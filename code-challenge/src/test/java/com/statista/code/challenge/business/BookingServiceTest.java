package com.statista.code.challenge.business;

import com.statista.code.challenge.persistence.BookingRepository;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.Currency;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

class BookingServiceTest {

    @Test
    void shouldSaveAndSendConfirmation() {
        NotificationService notificationService = mock(NotificationService.class);
        BookingRepository bookingRepository = mock(BookingRepository.class);
        when(bookingRepository.save(any())).thenReturn(
                Booking.builder()
                        .booking_id("generated by mock repo")
                        .description("masterplan")
                        .price(BigDecimal.valueOf(9.99))
                        .currency(Currency.getInstance("EUR"))
                        .email("'tis but a string")
                        .subscription_start_date(Instant.now())
                        .department("ministry of silly walks")
                        .build());
        BookingService bookingService = new BookingService(bookingRepository, notificationService, mock(BusinessRegistry.class));
        // Given the data for a Booking
        Booking booking = Booking.builder()
                .description("masterplan")
                .price(BigDecimal.valueOf(9.99))
                .currency(Currency.getInstance("EUR"))
                .email("'tis but a string")
                .subscription_start_date(Instant.now())
                .department("ministry of silly walks")
                .build();

        // When I create a Booking for it
        Booking createdBooking = bookingService.create(booking);

        // Then the Booking has an Id
        assertThat(createdBooking.booking_id()).isEqualTo("generated by mock repo");

        // And then a notification is sent
        verify(notificationService).send(createdBooking);
    }

    @Test
    void shouldUpdate() {
        NotificationService notificationService = mock(NotificationService.class);
        BookingRepository bookingRepository = mock(BookingRepository.class);
        Booking expected = Booking.builder()
                .booking_id("1")
                .description("updated masterplan")
                .price(BigDecimal.valueOf(99999.99))
                .currency(Currency.getInstance("EUR"))
                .email("'tis but a string")
                .subscription_start_date(Instant.ofEpochSecond(1))
                .department("ministry of silly walks")
                .build();
        when(bookingRepository.save(expected)).thenReturn(
                expected);
        BookingService bookingService = new BookingService(bookingRepository, notificationService, mock(BusinessRegistry.class));

        // Given the data for a Booking
        String booking_id = "1" ;
        Booking bookingInput = Booking.builder()
                .description("updated masterplan")
                .price(BigDecimal.valueOf(99999.99))
                .currency(Currency.getInstance("EUR"))
                .email("'tis but a string")
                .subscription_start_date(Instant.ofEpochSecond(1))
                .department("ministry of silly walks")
                .build();

        // When I update it
        Booking updatedBooking = bookingService.update(booking_id, bookingInput);

        // Then the booking is saved
        assertThat(updatedBooking).isEqualTo(expected);
    }

    @Test
    void shouldSearch() {
        BookingRepository bookingRepository = mock(BookingRepository.class);
        BookingService bookingService = new BookingService(bookingRepository, ignored -> {
        }, mock(BusinessRegistry.class));
        // Given a saved Booking
        when(bookingRepository.findById("y")).thenReturn(Booking.builder()
                .booking_id("y")
                .build());

        // When I search for it
        Booking actual = bookingService.search("y");

        // Then it is found
        assertThat(actual.booking_id()).isEqualTo("y");
    }

    @Test
    void shouldSearchByDepartment() {
        BookingRepository bookingRepository = mock(BookingRepository.class);
        BookingService bookingService = new BookingService(bookingRepository, ignored -> {
        }, mock(BusinessRegistry.class));
        // Given 2 saved Bookings with department a and 1 with department b
        when(bookingRepository.findAll()).thenReturn(List.of(
                Booking.builder().booking_id("first A").department("a").build(),
                Booking.builder().booking_id("second A").department("a").build(),
                Booking.builder().booking_id("first B").department("b").build()
        ));

        // When I search for all Bookings with Department a
        List<Booking> actual = bookingService.searchByDepartment("a");

        // Then the result contains exactly the 2 departments with Department a
        assertThat(actual).containsExactlyInAnyOrder(
                Booking.builder().booking_id("first A").department("a").build(),
                Booking.builder().booking_id("second A").department("a").build());
    }

    @Test
    void shouldSearchCurrencies() {
        BookingRepository bookingRepository = mock(BookingRepository.class);
        BookingService bookingService = new BookingService(bookingRepository, ignored -> {
        }, mock(BusinessRegistry.class));
        // Given saved Bookings with currency EUR and USD
        when(bookingRepository.findAll()).thenReturn(List.of(
                Booking.builder().booking_id("first EUR").currency(Currency.getInstance("EUR")).build(),
                Booking.builder().booking_id("second EUR").currency(Currency.getInstance("EUR")).build(),
                Booking.builder().booking_id("first USD").currency(Currency.getInstance("USD")).build()
        ));

        // When I search for all Currencies
        List<Currency> actual = bookingService.searchCurrencies();

        // Then the result contains exactly the 2 currencies
        assertThat(actual).containsExactlyInAnyOrder(Currency.getInstance("EUR"), Currency.getInstance("USD"));
    }

    @Test
    void shouldSumCurrency() {
        BookingRepository bookingRepository = mock(BookingRepository.class);
        BookingService bookingService = new BookingService(bookingRepository, ignored -> {
        }, mock(BusinessRegistry.class));

        // Given saved Bookings with currency EUR and USD
        when(bookingRepository.findAll()).thenReturn(List.of(
                Booking.builder().booking_id("first EUR")
                        .price(BigDecimal.valueOf(9.99)).currency(Currency.getInstance("EUR")).build(),
                Booking.builder().booking_id("second EUR")
                        .price(BigDecimal.valueOf(9.99)).currency(Currency.getInstance("EUR")).build(),
                Booking.builder().booking_id("first USD")
                        .price(BigDecimal.valueOf(29.99)).currency(Currency.getInstance("USD")).build()
        ));

        // When I ask sum the price of all EUR Bookings
        BigDecimal actual = bookingService.sumForCurrency(("EUR"));

        // Then the result is the sum of those Bookings
        assertThat(actual).isEqualTo(BigDecimal.valueOf(19.98));
    }

    @Test
    void shouldDoBusinessForSales() {
        BookingRepository bookingRepository = mock(BookingRepository.class);
        BusinessRegistry businessRegistry = mock(BusinessRegistry.class);
        BookingService bookingService = new BookingService(bookingRepository, ignored -> {
        }, businessRegistry);

        // Given a Booking with Department "Sales"
        when(businessRegistry.getDepartment("Sales")).thenReturn(booking -> "Take a voucher");
        when(bookingRepository.findById("1")).thenReturn(Booking.builder()
                .booking_id("1")
                .description("updated masterplan")
                .price(BigDecimal.valueOf(4.95))
                .currency(Currency.getInstance("EUR"))
                .email("loyal@customer.com")
                .subscription_start_date(Instant.ofEpochSecond(1))
                .department("Sales")
                .build());

        // When I execute the business logic for this booking
        String actual = bookingService.doBusiness("1");

        // Then the result is a voucher for the next booking of
        assertThat(actual).isEqualTo("Take a voucher");
    }
}